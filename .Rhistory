moderator_name = colnames(combined)[1]
subgroup_name = colnames(combined)[2]
colnames(combined)[1] <- "temp_moderator"
colnames(combined)[2] <- "temp_subgroup"
combined <- na.omit(combined)
combined_plot <- ggplot(combined, aes(y = `Effect Size`, x = temp_subgroup, fill = temp_moderator)) +
geom_bar(stat='identity', colour = "black", position = "dodge") +
scale_fill_brewer(palette = "Set2") +
geom_errorbar(aes(ymin = Lower, ymax = Upper), width=.05, position=position_dodge(0.9)) +
scale_y_continuous(name = "Effect Size (Cohen's d)") +
labs(title = paste0("Average Effect Size by ", subgroup_name), subtitle=paste0("Comparing ", moderator_name), x = subgroup_name, fill = moderator_name) +
theme_bw(base_size = 20) +
geom_hline(yintercept = 0.0) +
meta_theme
plot_list[[(length(plot_list) + 1)]] <- combined_plot
combined <- moderator_subgroup_tables[[length(moderator_subgroup_tables)]]
subgroup_name = colnames(combined)[1]
moderator_name = colnames(combined)[2]
colnames(combined)[1] <- "temp_subgroup"
colnames(combined)[2] <- "temp_moderator"
combined <- na.omit(combined)
combined_plot <- ggplot(combined, aes(y = `Effect Size`, x = temp_subgroup, fill = temp_moderator)) +
geom_bar(stat='identity', colour = "black", position = "dodge") +
scale_fill_brewer(palette = "Set2") +
geom_errorbar(aes(ymin = Lower, ymax = Upper), width=.05, position=position_dodge(0.9)) +
scale_y_continuous(name = "Effect Size (Cohen's d)") +
labs(title = paste0("Average Effect Size by ", subgroup_name), subtitle=paste0("Comparing ", moderator_name), x = subgroup_name, fill = moderator_name) +
geom_hline(yintercept = 0.0) +
meta_theme
# theme_bw(base_size = 24) +
# theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14), axis.title = element_text(size = 20), plot.title = element_text(hjust = 0.5, size = 24), plot.subtitle = element_text(hjust = 0.5, size = 20), plot.margin = unit(c(1, 1.5, 1, 1), "cm")) #+
plot_list[[(length(plot_list) + 1)]] <- combined_plot
#}
return(plot_list)
}
# Regressions
moderator_subgroup_regression <- function(analysis_dataset, subgroup, sugbroup_name, subgroup_levels, folder){
results_txt = as.character()
for (x in 1:length(subgroup_levels$name)){
meta_results_lists = list()
meta_results_variables = data.frame()
regression_results_lists = data.frame()
for (y in 1:length(reg_moderators$variable)){
moderator <- reg_moderators$variable[[y]]
temp_dataset <- analysis_dataset[which((analysis_dataset[subgroup] == subgroup_levels$name[[x]]) & (!(is.na(analysis_dataset[moderator])))), ]
#if (any(!(is.na(temp_dataset)))){
if (nrow(temp_dataset) > 1){
temp_results <- metagen(TE = temp_dataset$SDM, seTE = temp_dataset$"SDM_Std_Err", data = temp_dataset, studlab=paste(Study), fixed = FALSE, random = TRUE, method.tau = "DL", hakn = FALSE, prediction = FALSE, sm="SMD")
# if (any(!(is.na(temp_results$data[moderator])))){
regression <- rma.uni(yi = temp_results$TE, sei = temp_results$seTE, weights = temp_results$w.fixed, mods = temp_results$data[moderator], slab = temp_results$studlab, method = "FE", weighted = TRUE) #fixed effects model
meta_results_lists <- c(meta_results_lists, list(temp_results))
meta_results_variables[(nrow(meta_results_variables) + 1),c(1:3)] <- rbind(reg_moderators$variable[[y]], reg_moderators$label[[y]], subgroup_levels$name[[x]])
# Results
if (!is.na(regression$pval[2])){
if (regression$pval[2] <= 0.05){
if (regression$pval[2] < 0.001){ variable_p = "p < 0.001" }
else {
variable_p = paste0("p = ", round(regression$pval[2], 3))
}
results_txt <- c(paste0("\nChanges in ", reg_moderators$label[[y]], " are significantly correlated with changes in Effect Size \n\tQM = ", round(regression$QM, 2), ", B = ", round(regression$b[2], 3), " (se = ", round(regression$se[2], 3), ")", ", ", variable_p, "\n\n########################################################################################\n"))
} else {
variable_p = "p > 0.05"
results_txt <- c(paste0("\nChanges in ", reg_moderators$label[[y]], " are not significantly correlated with changes in Effect Size \n\tQM = ", round(regression$QM, 2), ", B = ", round(regression$b[2], 3), " (se = ", round(regression$se[2], 3), ")", ", p = ", round(regression$pval[2], 3), "\n\n########################################################################################\n"))
}
regression_results_lists[(nrow(regression_results_lists) + 1), 1:3] <- c(round(regression$QM, 2), variable_p, reg_moderators$label[[y]])
} else {
results_txt = as.character(paste0("\nNo data for ", reg_moderators$label[[y]]))
}
} else {
results_txt = as.character(paste0("\nNo data for ", reg_moderators$label[[y]]))
}
results_txt <- c(paste0(subgroup_levels$file[[x]], " Data"), results_txt )
writeLines(results_txt, paste0("/Users/pecsok/Desktop/Maggie/Graduate\ School/", folder, "/", subgroup_levels$file[[x]], "_", moderator, "_Meta_Regression.txt"))
if (nrow(temp_dataset) > 1){
sink(paste0("/Users/pecsok/Desktop/Maggie/Graduate\ School/", folder, "/", subgroup_levels$file[[x]], "_", moderator, "_Meta_Regression.txt"), append = TRUE)
print(regression)
sink()
}
}
# Plot
if (length(meta_results_lists) > 1){
pdf(paste0("/Users/pecsok/Desktop/Maggie/Graduate\ School/", folder, "/*", subgroup_levels$file[[x]], "_Meta_Regressions.pdf"))
for (m in 1:length(meta_results_lists)){
variable=meta_results_variables[m,1]
label=meta_results_variables[m,2]
# print(label)
# print(meta_results_lists[[m]]$data[[variable]])
# print(meta_results_lists[[m]]$data$Dx_Group[[1]])
regression_plot <- ggplot(meta_results_lists[[m]]$data, aes(x = meta_results_lists[[m]]$data[[variable]], y = meta_results_lists[[m]]$TE)) +
geom_point(shape = 21, alpha = 1, size = 3, color = analysis_results$data$Diagnosis_Psy_Category) +
labs(title = paste0("Meta-Regression of ", label, " on Effect Size"), subtitle = paste0(subgroup_levels$name[[x]], " Data")) +
# theme_bw(base_size = 24) +
# theme(axis.text = element_text(hjust = 1, size = 12), axis.title = element_text(size = 15), plot.title = element_text(hjust = 0.5, size = 18), plot.subtitle = element_text(hjust = 0.5, size = 16), plot.margin = unit(c(0.75, 1.25, 0.75, 0.75), "cm")) +
scale_x_continuous(name = label) +
scale_y_continuous(name = "Effect Size (Cohen's d)", limits = c(-2.5,2.5)) +
geom_smooth(method = "lm", se = TRUE, colour ="black", fullrange = TRUE) +
meta_theme + theme(axis.text.x = element_text(angle = 0))
annotate(geom = "label", label = paste0("Q = ", regression_results_lists[m,1], "\n", regression_results_lists[m,2]), x = -Inf, y = Inf, vjust = 1.2, hjust = -0.1, size = 4, color = "black", fill = "#b9d8f0")
print(regression_plot)
}
dev.off()
}
}
}
moderators <- data.frame("variable" = c("MRI_Field_Strength", "MRS_Protocol", "TMS_Frequency", "Voxel_Type", "MRS_Ratio", "MRS ROI","TMS Target","TMS_MRS_Same"), "label" = c("Field Strength", "MRS Protocol", "TMS Frequency", "Voxel Type", "Concentration", "Region of Interest","TMS Target","TMS MRS Same"))
reg_moderators <- data.frame("variable" = c("TMS_age_avg", "Sham_age_avg", "TMS Sex(%F)", "Sham Sex(%F)", "TE(ms)"), "label" = c("Case Age", "Control Age", "Sex", "Publication Year", "Echo Time"))
meta_theme =
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 15),
axis.title = element_text(size = 14),
axis.text.x = element_text(angle = 45, hjust = 1, size = 13),
axis.text.y = element_text(size = 13),
plot.margin = unit(c(1, 1, 1, 1), "cm"),
legend.position = "none",
text = element_text(family = 'Times')
)
meta_legend =
theme(legend.position = "right",
legend.spacing.y = unit(0.05, 'cm'))
#tms_effects_noglu <- tms_effects[which(tms_effects$`Neurometabolite_Group` != "Glu"),]
protocol = data.frame("name" = c("PRESS", "MEGA-PRESS"), "number" = 1:2)
moderator_table <- moderator_analysis(tms_effects, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence/protocol_barplot.pdf")
moderator_plot("MRS Protocol", moderator_table) #+
#  annotate("text", x=2.0, y=-0.55, label="*", size=6) +
#  annotate("text", x=3.0, y=0.23, label="*", size=6)
mrs_protocol_plot <- moderator_plot("MRS_Protocol", moderator_table)
dev.off()
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence_forest_plot.pdf", width=10, height=10)
forest_plot <- forest_plotter(tms_effects, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
tms_effects_noglu <- tms_effects[which(tms_effects$`Neurometabolite_Group` != "Glu"),]
protocol = data.frame("name" = c("PRESS", "MEGA-PRESS"), "number" = 1:2)
moderator_table <- moderator_analysis(tms_effects_noglu, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence/protocol_barplot_noglu.pdf")
moderator_plot("MRS Protocol", moderator_table) #+
#  annotate("text", x=2.0, y=-0.55, label="*", size=6) +
#  annotate("text", x=3.0, y=0.23, label="*", size=6)
mrs_protocol_plot <- moderator_plot("MRS_Protocol", moderator_table)
dev.off()
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence_forest_plot_noglu.pdf", width=10, height=10)
forest_plot <- forest_plotter(tms_effects, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
tms_effects_noglu <- tms_effects[which(tms_effects$`Neurometabolite_Group` != "Glu"),]
protocol = data.frame("name" = c("PRESS", "MEGA-PRESS"), "number" = 1:2)
moderator_table <- moderator_analysis(tms_effects_noglu, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence/protocol_barplot_noglu.pdf")
moderator_plot("MRS Protocol", moderator_table) #+
#  annotate("text", x=2.0, y=-0.55, label="*", size=6) +
#  annotate("text", x=3.0, y=0.23, label="*", size=6)
mrs_protocol_plot <- moderator_plot("MRS_Protocol", moderator_table)
dev.off()
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence_forest_plot_noglu.pdf", width=10, height=10)
forest_plot <- forest_plotter(tms_effects_noglu, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
tms_effects_noglu <- tms_effects[which(tms_effects$`Neurometabolite_Type` != "Glu"),]
protocol = data.frame("name" = c("PRESS", "MEGA-PRESS"), "number" = 1:2)
moderator_table <- moderator_analysis(tms_effects_noglu, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence/protocol_barplot_noglu.pdf")
moderator_plot("MRS Protocol", moderator_table) #+
#  annotate("text", x=2.0, y=-0.55, label="*", size=6) +
#  annotate("text", x=3.0, y=0.23, label="*", size=6)
mrs_protocol_plot <- moderator_plot("MRS_Protocol", moderator_table)
dev.off()
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence_forest_plot_noglu.pdf", width=10, height=10)
forest_plot <- forest_plotter(tms_effects_noglu, "MRS_Sequence", "MRS Protocol", protocol, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Sequence")
ratio <- data.frame("name" = c("Yes", "No"), "number" = 1:2)
moderator_table <- moderator_analysis(tms_effects, "MRS_Ratio", "MRS_Ratio", ratio, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio/mrs_ratio_barplot.pdf")
moderator_plot("MRS Ratio vs Abs. Concentration", moderator_table)# +
ratio_plot <- moderator_plot("MRS Ratio vs Abs. Concentration", moderator_table)
#  annotate("text", x=2.0, y=0.255, label="*", size=6)
dev.off()
#pdf("/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio/MRS_Ratio_forest_plot.pdf", width=10, height=10)
#forest_plot <- forest_plotter(tms_effects, "Diagnosis_Psy_Category", "Diagnosis_Psy_Group", diagnosis_psy_cat, "/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio")
#dev.off()
# All studies
tms_effects_all <- read_excel("/Users/pecsok/Desktop/tms_effects_resubmission.xlsx")
#tms_effects_all <- read_excel("/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/090723_tms_effects_shamrows.xlsx")
#tms_dataset_all <- read_excel("/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/090723_tms_effects_shamrows.xlsx")
tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study_ID` != "Moxon-Emre_2021"),] # ASD
tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study_ID` != "Diederichs_2021"),] # ASD
tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study_ID` != "Yang_2014"),] # ASD
tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study` != "Croarkin 2016b_3"),] # ASD
tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study` != "Croarkin 2016a_3"),] # ASD
#tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study_ID` != "Croarkin_2016"),]
#tms_effects_all <- tms_effects_all[which(tms_effects_all$`Study_ID` != "Bhattacharyya_2021"),]
# Data curation:
tms_effects <- tms_effects_all
#tms_effects <- tms_effects[which(tms_effects$`Group` == "Responder"),]
tms_dataset <- tms_effects
#### Original method
tms_meta_results <- metagen(TE = tms_effects$"SDM",
seTE = tms_effects$"SDM_Std_Err",
data = tms_effects,
studlab=tms_effects$"Study",
fixed = FALSE,
random = TRUE,
method.tau = "DL",
hakn = TRUE,
sm="SMD")
tms_meta_results
REAL_tms_meta_results <- tms_meta_results
# Add data for confidence interval, Cohens d to dataset
tms_meta_results_dataset <- data.frame(tms_meta_results)
for (x in 1:nrow(tms_meta_results_dataset)){
for (y in 1:nrow(tms_effects)){
if(tms_meta_results$data[x, 1] == tms_effects[y, 1]){
tms_effects[y, "SDM_P_Value"] = tms_meta_results_dataset[x, "pval"]
}
}
}
# Save results
sink("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/tms_meta_analysis_results.txt")
print(tms_meta_results)
sink()
REAL_tms_effects <- tms_effects
REAL_tms_meta_results_dataset <- tms_meta_results_dataset
ratio <- data.frame("name" = c("Yes", "No"), "number" = 1:2)
moderator_table <- moderator_analysis(tms_effects, "MRS_Ratio", "MRS_Ratio", ratio, "/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio/mrs_ratio_barplot.pdf")
moderator_plot("MRS Ratio vs Abs. Concentration", moderator_table)# +
ratio_plot <- moderator_plot("MRS Ratio vs Abs. Concentration", moderator_table)
#  annotate("text", x=2.0, y=0.255, label="*", size=6)
dev.off()
#pdf("/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio/MRS_Ratio_forest_plot.pdf", width=10, height=10)
#forest_plot <- forest_plotter(tms_effects, "Diagnosis_Psy_Category", "Diagnosis_Psy_Group", diagnosis_psy_cat, "/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/Analysis/R_Outputs/Moderator_Analyses/MRS_Ratio")
#dev.off()
view(tms_effects)
# Number Pulses
tms_meta_results$TMS_num_pulses <- as.numeric(tms_meta_results$TMS_num_pulses)
tms_meta_results$TMS_num_pulses_total <- as.numeric(tms_meta_results$TMS_num_pulses_total)
tms_meta_results$TMS_num_sessions <- as.numeric(tms_meta_results$TMS_num_sessions)
tms_meta_results$data$`TMS_Sex(F%)` <- as.numeric(tms_meta_results$data$`TMS_Sex(F%)`)
tms_meta_results$`TMS_intensity(%MT)` <- as.numeric(tms_meta_results$`TMS_intensity(%MT)`)
tms_meta_results$`TMS_num_sessions` <- as.numeric(tms_meta_results$`TMS_num_sessions`)
regression_plot <- moderator_regression(tms_meta_results, "TMS_num_pulses", "TMS Pulses/Session", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/Results/TMS_num_pulses/num_pulses__regression.pdf")
regression_plot
dev.off()
#**************************************************************************************************************************
# Number Total Pulses
num_pulses_regression_plot <- moderator_regression(tms_meta_results, "TMS_num_pulses_total", "TMS Total Pulses", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/TMS_num_pulses_tot/num_pulses__regression.pdf")
# Number Pulses
tms_meta_results$TMS_num_pulses <- as.numeric(tms_meta_results$TMS_num_pulses)
tms_meta_results$TMS_num_pulses_total <- as.numeric(tms_meta_results$TMS_num_pulses_total)
tms_meta_results$TMS_num_sessions <- as.numeric(tms_meta_results$TMS_num_sessions)
tms_meta_results$data$`TMS_Sex(F%)` <- as.numeric(tms_meta_results$data$`TMS_Sex(F%)`)
tms_meta_results$`TMS_intensity(%MT)` <- as.numeric(tms_meta_results$`TMS_intensity(%MT)`)
tms_meta_results$`TMS_num_sessions` <- as.numeric(tms_meta_results$`TMS_num_sessions`)
regression_plot <- moderator_regression(tms_meta_results, "TMS_num_pulses", "TMS Pulses/Session", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/Results/TMS_num_pulses/num_pulses__regression.pdf")
regression_plot
dev.off()
#**************************************************************************************************************************
# Number Total Pulses
num_pulses_regression_plot <- moderator_regression(tms_meta_results, "TMS_num_pulses_total", "TMS Total Pulses", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/TMS_num_pulses_tot/num_pulses__regression.pdf")
num_pulses_regression_plot
dev.off()
print(num_pulses_regression_plot)
#**************************************************************************************************************************
# Number Sessions
num_sessions_regression_plot <- moderator_regression(tms_meta_results, "TMS_num_sessions", "TMS Sessions", "Moderator_Analyses")
regression_plot <- moderator_regression(tms_meta_results, "Voxel_Size(ml)", "MRS Voxel Size", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/Voxel_Size/voxel_size_regression.pdf")
regression_plot
voxel_size_plot <- regression_plot
dev.off()
print(regression_plot)
regression_plot <- moderator_regression(tms_meta_results, "Combined_Age", "Age", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/age_regression.pdf")
regression_plot
dev.off()
print(regression_plot)
regression_plot <- moderator_regression(tms_meta_results, "TMS_Sex(F%)", "Percent Female", "Moderator_Analyses")
pdf("/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/Analysis/R_Outputs/Moderator_Analyses/gender_regression.pdf")
regression_plot <- moderator_regression(tms_meta_results, "TMS_Sex(F%)", "Percent Female", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/gender_regression.pdf")
regression_plot
dev.off()
print(regression_plot)
regression_plot <- moderator_regression(tms_meta_results, "TMS_intensity(%MT)", "TMS Intensity", "Moderator_Analyses")
pdf("/Users/pecsok/Desktop/Maggie/Graduate\ School/Project\ 2-Metaanalysis/Analysis/R_Outputs/Moderator_Analyses/TMS_Intensity/tms_intensity_regression.pdf")
regression_plot <- moderator_regression(tms_meta_results, "TMS_intensity(%MT)", "TMS Intensity", "Moderator_Analyses")
pdf("/Users/pecsok/Library/CloudStorage/Box-Box/GluCEST\ PhD/Project\ 2:\ GluCEST-TMS\ Meta-analysis/Analysis/R_Outputs/Moderator_Analyses/TMS_Intensity/tms_intensity_regression.pdf")
regression_plot
dev.off()
print(regression_plot)
regression_plot <- moderator_regression(tms_meta_results, "TMS_num_sessions", "Number of rTMS Sessions", "Moderator_Analyses")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(cifti)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
#source("/cbica/projects/thalamocortical_development/software/rotate_parcellation/R/perm.sphere.p.R") This package is used for parcel-based spin testing.
setwd("/Users/pecsok/GluCESTfMRI/glucest-fmri/")
grp_df = read.csv('/Users/pecsok/GluCESTfMRI/glucest-fmri/grp_df_3T.csv')
grp_df = read.csv('/Users/pecsok/GluCESTfMRI/glucest-fmri/fmri_pipeline/grp_df_3T.csv')
getwd
setwd("/Users/pecsok/GluCESTfMRI/glucest-rsfmri")
grp_df = read.csv('./grp_df_3T.csv')
grp_df = read.csv('./fmri_pipeline/grp_df_3T.csv')
diag_df = read.csv('./fmri_pipeline/diag_df_3T.csv')
# Choose what to analyse
networks = c("Cont", "Default", "DorsAttn", "Vis", "SalVentAttn", "SomMot", "Limbic")
CESTnetworks = c("avgCEST_Cont", "ctCEST_Cont", "avgCEST_Default", "ctCEST_Default","avgCEST_SomMot", "ctCEST_SomMot", "avgCEST_DorsAttn", "ctCEST_DorsAttn", "avgCEST_Vis", "ctCEST_Vis","avgCEST_Limbic", "ctCEST_Limbic",  "avgCEST_SalVentAttn","ctCEST_SalVentAttn")
grp_df = read.csv('./fmri_pipeline/grp_df_3T.csv')
diag_df = read.csv('./fmri_pipeline/diag_df_3T.csv')
# Choose what to analyse
networks = c("Cont", "Default", "DorsAttn", "Vis", "SalVentAttn", "SomMot", "Limbic")
CESTnetworks = c("avgCEST_Cont", "ctCEST_Cont", "avgCEST_Default", "ctCEST_Default","avgCEST_SomMot", "ctCEST_SomMot", "avgCEST_DorsAttn", "ctCEST_DorsAttn", "avgCEST_Vis", "ctCEST_Vis","avgCEST_Limbic", "ctCEST_Limbic",  "avgCEST_SalVentAttn","ctCEST_SalVentAttn")
CNB_scores = c("tap_tot", "er40_cr", "medf_pc")
CNB_valids = c("tap_valid", "er40_valid", "medf_valid") #,
diag_scores = c("dx_pscat") # ,"axis1_desc1","axis1_stat1"
demo_scores = c("sex", "age", "race","ethnic","dateDiff")
diag_details = c("axis1_desc1", "axis1_desc2", "axis1_desc3","axis1_desc4","axis1_desc5", "axis1_desc6")
covariate_age = 'age'
covariate_sex = 'sex'
covariate_ct = 'count'
view(grp_df)
# linear model of GluCEST vs tapping corrected for age
m1 <- lm(tap_tot ~ avgCEST_SomMot + age + sex, data = grp_df)
m1
summary(m1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
#source("/cbica/projects/thalamocortical_development/software/rotate_parcellation/R/perm.sphere.p.R") This package is used for parcel-based spin testing.
#https://www.middleprofessor.com/files/applied-biostatistics_bookdown/_book/adding-covariates-to-a-linear-model
# histograms
vars = list('age', 'tap_tot', 'SomMot', 'avgCEST_SomMot', 'ctCEST_SomMot')
for (var in vars) {
print(var)
}
for (var in vars) {
print(var)
hist(Temperature,
main=paste("Histogram of", var,sep=" "),
xlab=var,
#xlim=c(50,100),
col="darkmagenta",
freq=FALSE,
data=grp_df)
}
hist(var,
main=paste("Histogram of", var,sep=" "),
xlab=var,
#xlim=c(50,100),
col="darkmagenta",
freq=FALSE,
data=grp_df)
hist(var,
#main=paste("Histogram of", var,sep=" "),
xlab=var,
#xlim=c(50,100),
col="darkmagenta",
freq=FALSE,
data=grp_df)
hist(var,
#main=paste("Histogram of", var,sep=" "),
xlab=var,
#xlim=c(50,100),
col="darkmagenta",
data=grp_df)
class(grp_df$age)
for (var in vars) {
print(var)
}
print(grp_df$var)
for (var in vars) {
print(var)
print(grp_df$var)
}
hist(grp_df$age,
#main=paste("Histogram of", var,sep=" "),
xlab=var,
#xlim=c(50,100),
col="darkmagenta"
)
print(grp_df[[var]])
hist(grp_df[[var]]
}
hist(grp_df[[var]])
# Histograms
vars = list('age', 'tap_tot', 'SomMot', 'avgCEST_SomMot', 'ctCEST_SomMot')
# Histograms
vars = c('age', 'tap_tot', 'SomMot', 'avgCEST_SomMot', 'ctCEST_SomMot')
for (var in vars) {
print(var)
hist(grp_df[[var]])
}
hist(grp_df[[var]],
main=paste("Histogram of", var,sep=" "))
for (var in vars) {
print(var)
hist(grp_df[[var]],
main=paste("Histogram of", var,sep=" "))
}
for (var in vars) {
print(var)
hist(grp_df[[var]],
main=paste("Histogram of", var,sep=" "),
xlab=paste(var))
}
# linear model of GluCEST vs tapping corrected for age
m1 <- lm(tap_tot ~ avgCEST_SomMot + age + sex, data = grp_df)
gg <- ggplot(grp_df,
aes(x = avgCEST_SomMot,
y = tap_tot)) + #, color=hstatus
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
scale_color_manual(values = pal_okabe_ito,
name = NULL) +
# scale_color_manual(values = pal_batlow,
#   name = NULL) +
ylab("Area of necrosis (mg)") +
xlab("Area at risk (mg)") +
theme_pander() +
theme(legend.position="bottom")
gg <- ggplot(grp_df,
aes(x = avgCEST_SomMot,
y = tap_tot)) + #, color=hstatus
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
#scale_color_manual(values = pal_okabe_ito,
name = NULL) +
gg <- ggplot(grp_df,
aes(x = avgCEST_SomMot,
y = tap_tot)) + #, color=hstatus
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
#scale_color_manual(values = pal_okabe_ito,
#                   name = NULL) +
# scale_color_manual(values = pal_batlow,
#   name = NULL) +
ylab("Area of necrosis (mg)") +
xlab("Area at risk (mg)") +
theme_pander() +
theme(legend.position="bottom")
gg <- ggplot(grp_df,
aes(x = avgCEST_SomMot,
y = tap_tot)) + #, color=hstatus
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
#scale_color_manual(values = pal_okabe_ito,
#                   name = NULL) +
# scale_color_manual(values = pal_batlow,
#   name = NULL) +
ylab("Area of necrosis (mg)") +
xlab("Area at risk (mg)") +
# theme_pander() +
theme(legend.position="bottom")
gg
# Fix add loop
for (network in networks) {
gg <- ggplot(grp_df,
aes(x = network,
y = tap_tot)) +
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
#scale_color_manual(values = pal_okabe_ito,
#                   name = NULL) +
# scale_color_manual(values = pal_batlow,
#   name = NULL) +
ylab("Area of necrosis (mg)") +
xlab("Area at risk (mg)") +
# theme_pander() +
theme(legend.position="bottom")
}
# Fix add loop
for (network in networks) {
gg <- ggplot(grp_df,
aes(x = network,
y = tap_tot)) +
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
#scale_color_manual(values = pal_okabe_ito,
#                   name = NULL) +
# scale_color_manual(values = pal_batlow,
#   name = NULL) +
ylab("Area of necrosis (mg)") +
xlab("Area at risk (mg)") +
# theme_pander() +
theme(legend.position="bottom")
gg
}
gg
gg <- ggplot(grp_df,
aes(x = avgCEST_SomMot,
y = tap_tot)) + #, color=hstatus
geom_point() + #aes(color=treatment)
geom_smooth(method = "lm",
mapping = aes(y = predict(m1, grp_df))) +
#scale_color_manual(values = pal_okabe_ito,
#                   name = NULL) +
# scale_color_manual(values = pal_batlow,
#   name = NULL) +
ylab("Tapping Score") +
xlab("SomMot GluCEST") +
# theme_pander() +
theme(legend.position="bottom")
gg
